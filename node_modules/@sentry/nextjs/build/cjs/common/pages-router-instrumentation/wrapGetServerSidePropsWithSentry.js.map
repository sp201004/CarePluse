{"version":3,"file":"wrapGetServerSidePropsWithSentry.js","sources":["../../../../src/common/pages-router-instrumentation/wrapGetServerSidePropsWithSentry.ts"],"sourcesContent":["import type { GetServerSideProps } from 'next';\n\nimport { isBuild } from '../utils/isBuild';\nimport { withErrorInstrumentation, withTracedServerSideDataFetcher } from '../utils/wrapperUtils';\n\n/**\n * Create a wrapped version of the user's exported `getServerSideProps` function\n *\n * @param origGetServerSideProps The user's `getServerSideProps` function\n * @param parameterizedRoute The page's parameterized route\n * @returns A wrapped version of the function\n */\nexport function wrapGetServerSidePropsWithSentry(\n  origGetServerSideProps: GetServerSideProps,\n  parameterizedRoute: string,\n): GetServerSideProps {\n  return new Proxy(origGetServerSideProps, {\n    apply: async (wrappingTarget, thisArg, args: Parameters<GetServerSideProps>) => {\n      if (isBuild()) {\n        return wrappingTarget.apply(thisArg, args);\n      }\n\n      const [context] = args;\n      const { req, res } = context;\n\n      const errorWrappedGetServerSideProps = withErrorInstrumentation(wrappingTarget);\n      const tracedGetServerSideProps = withTracedServerSideDataFetcher(errorWrappedGetServerSideProps, req, res, {\n        dataFetcherRouteName: parameterizedRoute,\n        requestedRouteName: parameterizedRoute,\n        dataFetchingMethodName: 'getServerSideProps',\n      });\n\n      const {\n        data: serverSideProps,\n        baggage,\n        sentryTrace,\n      }: {\n        data?: unknown;\n        baggage?: string;\n        sentryTrace?: string;\n      } = await (tracedGetServerSideProps.apply(thisArg, args) as ReturnType<typeof tracedGetServerSideProps>);\n\n      if (typeof serverSideProps === 'object' && serverSideProps !== null && 'props' in serverSideProps) {\n        // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n        if (sentryTrace) {\n          (serverSideProps.props as Record<string, unknown>)._sentryTraceData = sentryTrace;\n        }\n\n        // The Next.js serializer throws on undefined values so we need to guard for it (#12102)\n        if (baggage) {\n          (serverSideProps.props as Record<string, unknown>)._sentryBaggage = baggage;\n        }\n      }\n\n      return serverSideProps;\n    },\n  });\n}\n"],"names":["isBuild","withErrorInstrumentation","withTracedServerSideDataFetcher"],"mappings":";;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,gCAAgC;AAChD,EAAE,sBAAsB;AACxB,EAAE,kBAAkB;AACpB,EAAsB;AACtB,EAAE,OAAO,IAAI,KAAK,CAAC,sBAAsB,EAAE;AAC3C,IAAI,KAAK,EAAE,OAAO,cAAc,EAAE,OAAO,EAAE,IAAI,KAAqC;AACpF,MAAM,IAAIA,eAAO,EAAE,EAAE;AACrB,QAAQ,OAAO,cAAc,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC;AAClD;;AAEA,MAAM,MAAM,CAAC,OAAO,CAAA,GAAI,IAAI;AAC5B,MAAM,MAAM,EAAE,GAAG,EAAE,GAAI,EAAA,GAAI,OAAO;;AAElC,MAAM,MAAM,8BAA+B,GAAEC,qCAAwB,CAAC,cAAc,CAAC;AACrF,MAAM,MAAM,wBAAyB,GAAEC,4CAA+B,CAAC,8BAA8B,EAAE,GAAG,EAAE,GAAG,EAAE;AACjH,QAAQ,oBAAoB,EAAE,kBAAkB;AAChD,QAAQ,kBAAkB,EAAE,kBAAkB;AAC9C,QAAQ,sBAAsB,EAAE,oBAAoB;AACpD,OAAO,CAAC;;AAER,MAAM,MAAM;AACZ,QAAQ,IAAI,EAAE,eAAe;AAC7B,QAAQ,OAAO;AACf,QAAQ,WAAW;AACnB;;AAIM,GAAI,OAAO,wBAAwB,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAA,EAAiD;;AAE9G,MAAM,IAAI,OAAO,eAAA,KAAoB,QAAS,IAAG,eAAgB,KAAI,IAAK,IAAG,OAAQ,IAAG,eAAe,EAAE;AACzG;AACA,QAAQ,IAAI,WAAW,EAAE;AACzB,UAAU,CAAC,eAAe,CAAC,KAAA,GAAkC,gBAAA,GAAmB,WAAW;AAC3F;;AAEA;AACA,QAAQ,IAAI,OAAO,EAAE;AACrB,UAAU,CAAC,eAAe,CAAC,KAAA,GAAkC,cAAA,GAAiB,OAAO;AACrF;AACA;;AAEA,MAAM,OAAO,eAAe;AAC5B,KAAK;AACL,GAAG,CAAC;AACJ;;;;"}